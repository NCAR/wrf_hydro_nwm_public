======================== Beheen - 7/21/2020 ===================
This is an independent nuopc testing between NWM and a dummy 
ocn and atm with a simple main and nuopc driver, independent of NEMS. 
 
/scratch2/COASTAL/coastal/save/NAMED_STORMS/NEMS_APP/NWM/ 
ocn.F90, atm.F90, esm.F90, esmApp.F90
Makefile.mainApp
Makefile.nuopc_with_main  ==> Makefile.nuopc
export MAINAPP=ON 
Makefile.NoahMP.nuopc
IO_code/Makefile.IO_code.nuopc
make -f Makefile.nuopc nuopcclean

To compile:
export MAINAPP=ON 
make clean & make nuopcclean
./compile_nuopc_NoahMP.sh setEnvar.sh esmf-impi-env.sh 3
   see produced results:
   nwm_esmf_extensions.mod
   NWM_ESMF_Extensions.o
   nwm_nuopc_gluecode.mod
   NWM_NUOPC_Gluecode.o
   nwm_nuopc_cap.mod
   nwm.mk
   libnwm_nuopc.a
   NWM_NUOPC_Cap.o
   esm.o ocn.o atm.o esmApp.o

To run:
cd CPL/NUOPC
ssh -X localhost
salloc --x11=first -t 02:30:00 --nodes=2 -A coastal
make -f Makefile.mainApp run

======================== Beheen - 6/26/2020: left unfinished  ===================
This is to do an independent nuopc testing between NWM and ADCIRC
with a simple main and nuopc driver, independent of NEMS. To do
this, needed to extract the components needed from adcirc and then
to see how I can have a senssible mainApp and Drive. Not finished...

Testing NWM cap with ADC cap without using NEMS in this directory:
/scratch2/COASTAL/coastal/save/NAMED_STORMS/NEMS_TEST with softlink to ADCIRC and NWM
located at this directory: /scratch2/COASTAL/coastal/save/NAMED_STORMS/z_code_sharing/ADC-WW3-NWM-NEMS

1) git clone https://github.com/moghimis/ADC-WW3-NWM-NEMS --recursive
2) softlink to ADCIRC located at ADC-WW3-NWM-NEMS into NEMS_TEST
3) softlink to NWM located at ADC-WW3-NWM-NEMS into NEMS_TEST
4) fixed the makefile.hwrf.nuopc in NEMS_TEST/ADCIRC/cpl/nuopc to make it like other makefile.xxx.nuopc
5) cd ADCIRC/cpl/nuopc
   loaded m for modules (m is an alias in my .bashrc file)
   source esmf-impi-env.sh
6) make -f makefile.atmesh.nuopc nuopc
7) make -f makefile.ww3data.nuopc nuopc
8) make -f makefile.hwrf.nuopc nuopc
9) cd NEMS_TEST/ADCIRC/work
10) ./make_nuopc.sh esmf-impi-env.sh intel
   see produced results:
   work/libadc.a, work/adcprep, util/tidefac,
   cpl/nuopc/libadc_cap.a cpl/nuopc/libatmesh_cap.a
   cpl/nuopc/libww3data_cap.a cpl/nuopc/libatm_cap.a
11)goto NWM directory ADC-WW3-NWM-NEMS/NWM/trunk/NDHMS
12)make clean & make clean nuopc
13)./compile_nuopc_NoahMP.sh setEnvar.sh esmf-impi-env.sh 3
   see produced results:
   nwm_esmf_extensions.mod
   NWM_ESMF_Extensions.o
   nwm_nuopc_gluecode.mod
   NWM_NUOPC_Gluecode.o
   nwm_nuopc_cap.mod
   nwm.mk
   libnwm_nuopc.a
   NWM_NUOPC_Cap.o

11) cd NEMS_TEST
12) make esm1

To clean both nuopc and adcirc: goto work dir and invoke
  a) make clean
  b) make clobber

===================   To test NWM with atm_cap: Unfinished
copied Saeed's codes, hwrf_cap.F90  hwrf_mod.F90  makefile.hwrfdata.nuopc
into an ATM directory similar to NEMS structure. See ATM/Readme.beheen
The test data for now is locate at: z_code_sharing/ADC-WW3-NWM-NEMS/ATM


========================== Beheen - 1/9/2020

README for single Model NUOPC prototype with main and driver for
NWM V2.1 - commit 8f248ef1b6b639214ebafed41e3cfd7e4d216b76 (origin/master, origin/HEAD, master)
------------------------------------------------------------------------

Description: To test NWM in NUOPC coupled mode, we need a main and a nuopc driver and a model.
  - Makefile.mainApp - Makefile that is based on the standard esmf.mk mechanism.
  - NWM_ESMF_Extensions.F90  NWM_NUOPC_Cap.F90  NWM_NUOPC_Gluecode.F90 - The MODEL component, specializing generic NUOPC_Model.
  - driver.F90 - Driver specializing NUOPC_Driver, driving the single MODEL.
  - mainApp.F90 - Main application cap.

The above source codes are to be compiled and then to be tested with NWM input files (parameters & forcing)
 	
Dependencies: 
  - module load impi/2018.0.4
  - module load szip/2.1
  - module load hdf5/1.10.4
  - module load netcdf/4.6.1
  - module use /home/emc.nemspara/SOFT-hera/modulefiles
  - module load esmf/8.0.0bs48g
  See file esmf-impi-env.sh

  
Build: To compile follow below instructions:
  - Go to trunk/NDHMS
  - Set environment variable MAINAPP:
    > export MAINAPP=ON
  - ./compile_nuopc_NoahMP.sh setEnvar.sh esmf-impi-env.sh 3
  OR
  - Set environment variable MAINAPP:
    > MAINAPP=ON
  - Set NWM required environment variable:
    source setEnvar.sh 		==> located in trunk/NDHMS
  - Set environment variable ESMFMKFILE:
    source esmf-impi-env.sh 	==> located in trunk/NDHMS
  - Configure compiler option:
    ./configure
    3            		==> enter option number 3
  - Ready to compile, run this script
    ./compile_nuopc_NoahMP.sh
  - See the executable in trunk/NDHMS/CPL/NUOPC_cpl/mainApp
 
Execution: To test you must setup a location where NWM input files are located
	and mainApp executable is linked or copied into this location (NWM_RUN)
  - Optionally set environment variable ESMF_RUNTIME_COMPLIANCECHECK to ON.
  - salloc --x11=first -t 00:60:00 --nodes=32 -A coastal
  - mpirun -np 768 ./mainApp.exe (where X is the total number of PETs)
  
Output:
  - PET*.Log files containing compliance checker output if turned on.
  - The prototype outputs time stepping information to stdout.
  


Code structure:
  - Main.mk     - Makefile that is based on the standard esmf.mk mechanism.
  - NWM_ESMF_Extensions.F90  NWM_NUOPC_Cap.F90  NWM_NUOPC_Gluecode.F90   - The MODEL component, specializing generic NUOPC_Model.
  - driver.F90  - Driver specializing NUOPC_Driver, driving the single MODEL.
  - mainApp.F90 - Main application cap.
